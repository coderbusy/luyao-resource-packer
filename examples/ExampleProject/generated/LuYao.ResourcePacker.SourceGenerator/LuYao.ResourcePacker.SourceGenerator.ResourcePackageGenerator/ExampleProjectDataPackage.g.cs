// <auto-generated />
#nullable enable

using System;
using System.IO;
using LuYao.ResourcePacker;

namespace ExampleProject
{
    /// <summary>
    /// Provides strongly-typed access to resources in ExampleProject.
    /// </summary>
    public static class ExampleProjectDataPackage
    {
        /// <summary>
        /// Resource keys available in this package.
        /// </summary>
        public static class Keys
        {
            /// <summary>Resource key for 'config'</summary>
            public const string config = "config";
            /// <summary>Resource key for 'message'</summary>
            public const string message = "message";
            /// <summary>Resource key for 'template'</summary>
            public const string template = "template";
        }

        private static readonly Lazy<ResourcePackageReader> _reader = new Lazy<ResourcePackageReader>(() =>
        {
            var datFilePath = Path.Combine(AppContext.BaseDirectory, "ExampleProject.dat");
            if (!File.Exists(datFilePath))
            {
                throw new FileNotFoundException($"Resource package file not found: {datFilePath}");
            }
            return new ResourcePackageReader(datFilePath);
        });

        /// <summary>
        /// Gets the ResourcePackageReader instance for accessing resources.
        /// </summary>
        public static ResourcePackageReader Reader => _reader.Value;

        /// <summary>
        /// Reads the 'config' resource as a byte array asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<byte[]> ReadConfigAsync()
        {
            return Reader.ReadResourceAsync(Keys.config);
        }

        /// <summary>
        /// Reads the 'config' resource as a string asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<string> ReadConfigAsyncAsString()
        {
            return Reader.ReadResourceAsStringAsync(Keys.config);
        }

        /// <summary>
        /// Reads the 'message' resource as a byte array asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<byte[]> ReadMessageAsync()
        {
            return Reader.ReadResourceAsync(Keys.message);
        }

        /// <summary>
        /// Reads the 'message' resource as a string asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<string> ReadMessageAsyncAsString()
        {
            return Reader.ReadResourceAsStringAsync(Keys.message);
        }

        /// <summary>
        /// Reads the 'template' resource as a byte array asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<byte[]> ReadTemplateAsync()
        {
            return Reader.ReadResourceAsync(Keys.template);
        }

        /// <summary>
        /// Reads the 'template' resource as a string asynchronously.
        /// </summary>
        public static System.Threading.Tasks.Task<string> ReadTemplateAsyncAsString()
        {
            return Reader.ReadResourceAsStringAsync(Keys.template);
        }

    }
}
